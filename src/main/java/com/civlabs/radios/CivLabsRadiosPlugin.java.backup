package com.civlabs.radios;

import com.civlabs.radios.core.FrequencyManager;
import com.civlabs.radios.listener.RadioBreakListener;
import com.civlabs.radios.listener.RadioInteractListener;
import com.civlabs.radios.listener.RadioPlaceListener;
import com.civlabs.radios.model.DisableReason;
import com.civlabs.radios.model.Radio;
import com.civlabs.radios.store.RadioStore;
import com.civlabs.radios.tasks.OperatorGuardTask;
import com.civlabs.radios.util.ItemUtil;
import com.civlabs.radios.util.Keys;
import com.civlabs.radios.voice.RadioVoicePlugin;
import com.civlabs.radios.voice.VoiceBridge;
import de.maxhenkel.voicechat.api.BukkitVoicechatService;
import org.bukkit.Bukkit;
import org.bukkit.NamespacedKey;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.UUID;

public final class CivLabsRadiosPlugin extends JavaPlugin {

    private RadioStore radioStore;
    private FrequencyManager freqManager;
    private VoiceBridge voice;
    private OperatorGuardTask guardTask;

    public static NamespacedKey key(String path, JavaPlugin plugin) {
        return new NamespacedKey(plugin, path);
    }

    @Override
    public void onEnable() {
        saveDefaultConfig();
        Keys.init(this);

        this.radioStore = new RadioStore(getDataFolder().toPath().resolve("radios.yml"));
        this.freqManager = new FrequencyManager(getConfig().getInt("maxFrequencies", 10));
        this.voice = new VoiceBridge(this);

        BukkitVoicechatService svc = getServer().getServicesManager().load(BukkitVoicechatService.class);
        if (svc != null) {
            svc.registerPlugin(new RadioVoicePlugin(this, voice));
        } else {
            getLogger().warning("Simple Voice Chat not detected as a service. Ensure the plugin is installed.");
        }

        Bukkit.getPluginManager().registerEvents(new RadioPlaceListener(this), this);
        Bukkit.getPluginManager().registerEvents(new RadioInteractListener(this), this);
        Bukkit.getPluginManager().registerEvents(new RadioBreakListener(this), this);

        ItemUtil.registerRecipeIfEnabled(this);

        this.guardTask = new OperatorGuardTask(this, radioStore, this::disableRadioIfEnabled);
        this.guardTask.start();

        getLogger().info("CivLabsRadios enabled.");
    }

    @Override
    public void onDisable() {
        if (guardTask != null) guardTask.stop();
        voice.shutdownAllSpeakers();
        for (Radio r : radioStore.getAll()) {
            if (r.isEnabled()) disableRadioIfEnabled(r, DisableReason.SERVER_STOP);
        }
        getLogger().info("CivLabsRadios disabled.");
    }

    public RadioStore store() { return radioStore; }
    public FrequencyManager freq() { return freqManager; }
    public VoiceBridge voice() { return voice; }

    public boolean canOperate(Player p) {
        return true;
    }

    public boolean enableRadio(Radio r, Player operator, int txFreq) {
        if (!canOperate(operator)) return false;
        if (!freqManager.claim(txFreq, r.getId())) {
            operator.sendMessage(color(getConfig().getString("messages.freq_in_use", "That frequency is already in use.")));
            return false;
        }
        r.setTransmitFrequency(txFreq);
        r.setOperator(operator.getUniqueId());
        r.setEnabled(true);
        radioStore.save(r);

        voice.bindOperator(r, operator);
        operator.sendMessage(color(getConfig().getString("messages.enabled", "Enabled on {freq}.").replace("{freq}", String.valueOf(txFreq))));
        return true;
    }

    public void disableRadioIfEnabled(Radio r, DisableReason reason) {
        if (!r.isEnabled()) return;
        if (r.getTransmitFrequency() > 0) {
            freqManager.release(r.getTransmitFrequency(), r.getId());
        }
        UUID op = r.getOperator();
        if (op != null) voice.unbindOperator(op, r.getTransmitFrequency());
        voice.removeSpeaker(r.getId());
        r.setEnabled(false);
        r.setOperator(null);
        radioStore.save(r);

        Player notify = op != null ? Bukkit.getPlayer(op) : null;
        if (notify != null) {
            notify.sendMessage(color(getConfig().getString("messages.disabled", "Disabled: {reason}.").replace("{reason}", reason.name())));
        }
    }

    private net.kyori.adventure.text.Component color(String legacy) {
        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(legacy);
    }
}
