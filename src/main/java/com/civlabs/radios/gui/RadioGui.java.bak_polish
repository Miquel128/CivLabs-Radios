package com.civlabs.radios.gui;

import com.civlabs.radios.CivLabsRadiosPlugin;
import com.civlabs.radios.model.Radio;
import net.kyori.adventure.text.Component;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

public class RadioGui {

    public static Inventory open(CivLabsRadiosPlugin plugin, Player viewer, Radio r) {
        plugin.getLogger().info("[DEBUG GUI] Creating Radio inventory...");
        Inventory inv = Bukkit.createInventory(null, 27, Component.text("Radio"));
        
        plugin.getLogger().info("[DEBUG GUI] Adding transmit frequency items (1-10)...");
        // Row 1: TX 1..10
        for (int i=1;i<=10;i++){
            ItemStack item = freqItem(i, "Transmit", plugin.freq().inUse(i) && (r.getTransmitFrequency()!=i));
            inv.setItem(i-1, item);
            plugin.getLogger().info("[DEBUG GUI] Set slot " + (i-1) + " to: " + item);
        }
        
        plugin.getLogger().info("[DEBUG GUI] Adding listen frequency items (1-10)...");
        // Row 2: RX 1..10
        for (int i=1;i<=10;i++){
            ItemStack item = freqItem(i, "Listen", false);
            inv.setItem(9+i, item);
            plugin.getLogger().info("[DEBUG GUI] Set slot " + (9+i) + " to: " + item);
        }
        
        plugin.getLogger().info("[DEBUG GUI] Adding toggle and info items...");
        // Row 3: Enable/Disable toggle + status
        ItemStack toggle = toggleItem(r.isEnabled());
        ItemStack info = infoItem(r);
        inv.setItem(22, toggle);
        inv.setItem(26, info);
        plugin.getLogger().info("[DEBUG GUI] Set slot 22 to: " + toggle);
        plugin.getLogger().info("[DEBUG GUI] Set slot 26 to: " + info);
        
        plugin.getLogger().info("[DEBUG GUI] Opening inventory for player...");
        viewer.openInventory(inv);
        plugin.getLogger().info("[DEBUG GUI] Inventory opened!");
        return inv;
    }

    private static ItemStack freqItem(int f, String label, boolean locked) {
        Material mat = locked ? Material.RED_STAINED_GLASS_PANE : Material.LIME_STAINED_GLASS_PANE;
        ItemStack it = new ItemStack(mat);
        ItemMeta m = it.getItemMeta();
        if (m != null) {
            m.displayName(Component.text(label + " " + f));
            it.setItemMeta(m);
        }
        return it;
    }

    private static ItemStack toggleItem(boolean enabled) {
        Material mat = enabled ? Material.REDSTONE_TORCH : Material.LEVER;
        ItemStack it = new ItemStack(mat);
        ItemMeta m = it.getItemMeta();
        if (m != null) {
            m.displayName(Component.text(enabled ? "Disable" : "Enable"));
            it.setItemMeta(m);
        }
        return it;
    }

    private static ItemStack infoItem(Radio r) {
        ItemStack it = new ItemStack(Material.BOOK);
        ItemMeta m = it.getItemMeta();
        if (m != null) {
            m.displayName(Component.text("Status"));
            it.setItemMeta(m);
        }
        return it;
    }

    public static void handleClick(CivLabsRadiosPlugin plugin, Player p, Radio r, InventoryClickEvent e) {
        e.setCancelled(true);
        if (e.getCurrentItem()==null) return;
        String name = net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer.plainText().serialize(e.getCurrentItem().getItemMeta().displayName());
        if (name.startsWith("Transmit")) {
            int f = Integer.parseInt(name.split(" ")[1]);
            r.setTransmitFrequency(f);
            plugin.store().save(r);
            p.sendMessage(Component.text("Transmit frequency set to " + f));
        } else if (name.startsWith("Listen")) {
            int f = Integer.parseInt(name.split(" ")[1]);
            r.setListenFrequency(f);
            plugin.store().save(r);
            p.sendMessage(Component.text("Listening frequency set to " + f));
            plugin.voice().updateSpeakerFor(r);
        } else if (name.equals("Enable")) {
            if (!plugin.canOperate(p)) { p.sendMessage(Component.text("You are not eligible to operate this radio.")); return; }
            if (r.getTransmitFrequency() < 1) { p.sendMessage(Component.text("Pick a transmit frequency first.")); return; }
            plugin.enableRadio(r, p, r.getTransmitFrequency());
        } else if (name.equals("Disable")) {
            plugin.disableRadioIfEnabled(r, com.civlabs.radios.model.DisableReason.ADMIN);
        }
        open(plugin, p, r);
    }
}
